20d19
< #include <malloc/malloc.h>
39a39,40
> 
> 
91d91
< %}
92a93,96
> extern int yylex(void);
> extern int yyerror(const char* errmsg);
> 
> %}
110,121d113
<  Nei tokens, alcuni sono preceduti dalla struttura che devono chiamare.
<  Ad esempio, il WHILE ha in fronte <while_stmt> che va ad istanziare la relativa
<  struttura. Ci si può referenziare a questa usando $1 nella grammatica, andando
<  a recuperare le variabili della struttura stessa ($1 perchè è il primo parametro).
<  
<  Altre, ad esempio il DO, non hanno bisogno di una struttura complessa ma di una
<  sola label, perciò si utilizza semplicemente <label> e ci si riferenzia ad essa
<  come $1. Si può infatti creare $1 = newLabel(program);
<  
<  Altre ancora, non hanno nessuna "entità" in fronte: questo perchè non necessitano
<  di label per fare dei jump o simili (esempio: RETURN, WRITE...)
<  
130a123
> %token FOR
134d126
< %token FROM ONLY STEP
143,144d134
< %token <label> REPEAT
< 
147d136
< %type <expr> assign_statement
180,181c169
<  
< program: var_declarations statements
---
> program  : var_declarations statements
194c182
< var_declarations: var_declarations var_declaration   { /* does nothing */ }
---
> var_declarations : var_declarations var_declaration   { /* does nothing */ }
198c186
< var_declaration: TYPE declaration_list SEMI
---
> var_declaration   : TYPE declaration_list SEMI
205c193
< declaration_list: declaration_list COMMA declaration
---
> declaration_list  : declaration_list COMMA declaration
216c204
< declaration: IDENTIFIER ASSIGN NUMBER
---
> declaration : IDENTIFIER ASSIGN NUMBER
247c235
< code_block: statement                  { /* does nothing */ }
---
> code_block  : statement                  { /* does nothing */ }
252c240
< statements: statements statement       { /* does nothing */ }
---
> statements  : statements statement       { /* does nothing */ }
258c246
< statement: assign_statement SEMI      { /* does nothing */ }
---
> statement   : assign_statement SEMI      { /* does nothing */ }
264c252
< control_statement: if_statement         { /* does nothing */ }
---
> control_statement : if_statement         { /* does nothing */ }
268d255
<             | from_repeat_stmt       { /* no hace nada señor*/ }
275c262
< assign_statement: IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
---
> assign_statement : IDENTIFIER LSQUARE exp RSQUARE ASSIGN exp
276a264,269
>                /* Notify to `program' that the value $6
>                 * have to be assigned to the location
>                 * addressed by $1[$3]. Where $1 is obviously
>                 * the array/pointer identifier, $3 is an expression
>                 * that holds an integer value. That value will be
>                 * used as an index for the array $1 */
278c271,276
< 			   $$ = create_expression($6.value, IMMEDIATE);
---
> 
>                /* free the memory associated with the IDENTIFIER.
>                 * The use of the free instruction is required
>                 * because of the value associated with IDENTIFIER.
>                 * The value of IDENTIFIER is a string created
>                 * by a call to the function `strdup' (see Acse.lex) */
283a282,294
> 
>                /* in order to assign a value to a variable, we have to
>                 * know where the variable is located (i.e. in which register).
>                 * the function `get_symbol_location' is used in order
>                 * to retrieve the register location assigned to
>                 * a given identifier.
>                 * A symbol table keeps track of the location of every
>                 * declared variable.
>                 * `get_symbol_location' perform a query on the symbol table
>                 * in order to discover the correct location of
>                 * the variable with $1 as identifier */
>                
>                /* get the location of the symbol with the given ID. */
286,294c297,308
<                if ($3.expression_type == IMMEDIATE) {
< 					gen_addi_instruction(program, location, REG_0, $3.value);
< 					$$ = create_expression($3.value, IMMEDIATE);
< 			   }
<                else {
< 			        gen_add_instruction(program, location, REG_0, $3.value, CG_DIRECT_ALL);
< 					$$ = create_expression($3.value, REGISTER);
< 			   }
< 			   free($1);
---
>                /* update the value of location */
>                if ($3.expression_type == IMMEDIATE)
>                   gen_move_immediate(program, location, $3.value);
>                else
>                   gen_add_instruction(program,
>                                       location,
>                                       REG_0,
>                                       $3.value,
>                                       CG_DIRECT_ALL);
> 
>                /* free the memory associated with the IDENTIFIER */
>                free($1);
298c312
< if_statement: if_stmt
---
> if_statement   : if_stmt
322c336
< if_stmt:  IF
---
> if_stmt  :  IF
342c356
< while_statement: WHILE
---
> while_statement  : WHILE
378c392
< do_while_statement: DO
---
> do_while_statement  : DO
400,420c414
< 
< from_repeat_stmt: FROM LPAR statement RPAR REPEAT {
<       $5 = assignNewLabel(program);
<    }
<    code_block ONLY IF LPAR exp RPAR{
<       $9 = newLabel(program);
<       if ($11.expression_type==IMMEDIATE) 
<          gen_load_immediate(program, $11.value);
<       else 
<          gen_andb_instruction(program, $11.value, $11.value, $11.value, CG_DIRECT_ALL );
<       gen_beq_instruction(program, $9,0);
<    }
<    STEP LPAR statement RPAR{
<       gen_bt_instruction(program, $5, 0);
<       assignLabel(program, $9);
<    }
<  ;
< 
< 
< 
< return_statement: RETURN
---
> return_statement : RETURN
427c421
< read_statement: READ LPAR IDENTIFIER RPAR 
---
> read_statement : READ LPAR IDENTIFIER RPAR 
520d513
<    | assign_statement {}
